From d330b2b142aedf06cc54bfa3fe5f750d2ed31bbf Mon Sep 17 00:00:00 2001
From: whrvt <william@horvath.blog>
Date: Sun, 28 Jan 2024 01:36:28 -0800
Subject: [PATCH] winealsa.drv: Support custom period and buffer sizes.

Relevant environment variables are: 
STAGING_AUDIO_EXTRA_PAD (default is 40000, can be set to 0, adds extra padding)
STAGING_AUDIO_PRD_SIZE (recommended is the smallest stable pipewire quantum)
STAGING_AUDIO_PRD_NUM (recommended is 4)

Also, silence pcm.c underrun errors.
---
 dlls/winealsa.drv/alsa.c | 57 ++++++++++++++++++++++++++++++++++------
 1 file changed, 49 insertions(+), 8 deletions(-)

diff --git a/dlls/winealsa.drv/alsa.c b/dlls/winealsa.drv/alsa.c
index 11111111111..11111111111 100644
--- a/dlls/winealsa.drv/alsa.c
+++ b/dlls/winealsa.drv/alsa.c
@@ -82,10 +82,10 @@ struct alsa_stream
     pthread_mutex_t lock;
 };
 
-#define EXTRA_SAFE_RT 40000
+REFERENCE_TIME EXTRA_SAFE_RT = 40000;
 
-static const REFERENCE_TIME def_period = 100000;
-static const REFERENCE_TIME min_period = 50000;
+REFERENCE_TIME def_period = 100000;
+REFERENCE_TIME min_period = 50000;
 
 static const WCHAR drv_keyW[] = {'S','o','f','t','w','a','r','e','\\',
     'W','i','n','e','\\','D','r','i','v','e','r','s','\\',
@@ -810,10 +810,51 @@ static NTSTATUS alsa_create_stream(void *args)
 
     params->result = S_OK;
 
+    const char* esrtenv = getenv("STAGING_AUDIO_EXTRA_PAD");
+    const char* penv    = getenv("STAGING_AUDIO_PRD_SIZE" );
+    const char* pnumenv = getenv("STAGING_AUDIO_PRD_NUM"  );
+    REFERENCE_TIME esrtval, pval, prdtime;
+    REFERENCE_TIME pnumval = 4; // default number of periods (buffer length)
+
+    if (esrtenv) {
+        esrtval = atol(esrtenv);
+        if (esrtval >= 0) EXTRA_SAFE_RT = esrtval; // failsafe
+        TRACE("AUDIO\n\tpadding:\t%llu\n", EXTRA_SAFE_RT);
+    }
+    else {
+        TRACE("AUDIO\n\tpadding:\t%llu\t(default)\n", EXTRA_SAFE_RT);
+    }
+
     if (params->share == AUDCLNT_SHAREMODE_SHARED) {
-        params->period = def_period;
-        if (params->duration < 3 * params->period)
-            params->duration = 3 * params->period;
+	    if (penv) {
+            pval = atol(penv);
+            prdtime = muldiv(pval, 10000000, params->fmt->nSamplesPerSec);
+
+            if (prdtime <= 0) prdtime = min_period; // failsafe
+            params->period = def_period = min_period = prdtime;
+
+            TRACE("\tperiod:\t\t%llu\n", params->period);
+            TRACE("\tlatency:\t%llu/%d\n", pval, params->fmt->nSamplesPerSec);
+        }
+        else {
+            params->period = def_period;
+            TRACE("\tperiod:\t\t%llu\t(default)\n", params->period);
+            TRACE("\tlatency:\t480/44100\t(default)\n");
+        }
+
+        if (pnumenv) {
+            pnumval = atol(pnumenv);
+            if (pnumval <= 0) pnumval = 4; // failsafe
+            params->duration = pnumval * params->period;
+
+            TRACE("\tduration:\t%llu (%llu periods)\n", params->duration, pnumval);
+        }
+        else {
+            params->duration = pnumval * params->period;
+            TRACE("\tduration:\t%llu (%llu periods)\t(default)\n", params->duration, pnumval);
+        }
+
+
     } else {
         if (fmtex->Format.wFormatTag == WAVE_FORMAT_EXTENSIBLE &&
            (fmtex->dwChannelMask == 0 || fmtex->dwChannelMask & SPEAKER_RESERVED))
# @@ -903,24 +947,26 @@ static NTSTATUS alsa_create_stream(void *args)
 
#      stream->mmdev_period_rt = params->period;
#      alsa_period_us = stream->mmdev_period_rt / 10;
# -    if((err = snd_pcm_hw_params_set_period_time_near(stream->pcm_handle,
# -                stream->hw_params, &alsa_period_us, NULL)) < 0)
# -        WARN("Unable to set period time near %u: %d (%s)\n", alsa_period_us,
# -                err, snd_strerror(err));
# +    //if((err = snd_pcm_hw_params_set_period_time_near(stream->pcm_handle,
# +    //            stream->hw_params, &alsa_period_us, NULL)) < 0) {
# +    //    err = 1;
# +    //    WARN("Unable to set period time near %u: %d (%s)\n", alsa_period_us,
# +    //            err, snd_strerror(err));
# +    //}
#      /* ALSA updates the output variable alsa_period_us */
 
#      stream->mmdev_period_frames = muldiv(params->fmt->nSamplesPerSec,
#              stream->mmdev_period_rt, 10000000);
 
#      /* Buffer 4 ALSA periods if large enough, else 4 mmdevapi periods */
# -    stream->alsa_bufsize_frames = stream->mmdev_period_frames * 4;
# -    if(err < 0 || alsa_period_us < params->period / 10)
# +    stream->alsa_bufsize_frames = stream->mmdev_period_frames * 1;
# +    //if(err < 0 || alsa_period_us < params->period / 10)
#          err = snd_pcm_hw_params_set_buffer_size_near(stream->pcm_handle,
#                  stream->hw_params, &stream->alsa_bufsize_frames);
# -    else{
# -        unsigned int periods = 4;
# -        err = snd_pcm_hw_params_set_periods_near(stream->pcm_handle, stream->hw_params, &periods, NULL);
# -    }
# +    //else{
# +    //    unsigned int periods = 1;
# +    //    err = snd_pcm_hw_params_set_periods_near(stream->pcm_handle, stream->hw_params, &periods, NULL);
# +    //}
#      if(err < 0)
#          WARN("Unable to set buffer size: %d (%s)\n", err, snd_strerror(err));
#  @@ -991,10 +1037,10 @@ static NTSTATUS alsa_create_stream(void *args)
#      stream->bufsize_frames = muldiv(params->duration, params->fmt->nSamplesPerSec, 10000000);
#      if(params->share == AUDCLNT_SHAREMODE_EXCLUSIVE)
#          stream->bufsize_frames -= stream->bufsize_frames % stream->mmdev_period_frames;
# -    stream->hidden_frames = stream->alsa_period_frames + stream->mmdev_period_frames +
# -        muldiv(params->fmt->nSamplesPerSec, EXTRA_SAFE_RT, 10000000);
# +    stream->hidden_frames = 0;//stream->alsa_period_frames + stream->mmdev_period_frames +
# +        //muldiv(params->fmt->nSamplesPerSec, EXTRA_SAFE_RT, 10000000);
#      /* leave no less than about 1.33ms or 256 bytes of data after a rewind */
# -    stream->safe_rewind_frames = max(256 / params->fmt->nBlockAlign, muldiv(133, params->fmt->nSamplesPerSec, 100000));
# +    stream->safe_rewind_frames = 0;
 
#      /* Check if the ALSA buffer is so small that it will run out before
#       * the next MMDevAPI period tick occurs. Allow a little wiggle room
@@ -1310,7 +1351,7 @@ static snd_pcm_sframes_t alsa_write_best_effort(struct alsa_stream *stream, BYTE
         WARN("writei failed, recovering: %ld (%s)\n", written,
                 snd_strerror(written));
 
-        ret = snd_pcm_recover(stream->pcm_handle, written, 0);
+        ret = snd_pcm_recover(stream->pcm_handle, written, 1);
         if(ret < 0){
             WARN("Could not recover: %d (%s)\n", ret, snd_strerror(ret));
             return ret;
# @@ -1399,22 +1445,22 @@ static void alsa_write_data(struct alsa_stream *stream)
#      /* this call seems to be required to get an accurate snd_pcm_state() */
#      avail = snd_pcm_avail_update(stream->pcm_handle);
 
# -    if(snd_pcm_state(stream->pcm_handle) == SND_PCM_STATE_XRUN){
# -        TRACE("XRun state, recovering\n");
# +    // if(snd_pcm_state(stream->pcm_handle) == SND_PCM_STATE_XRUN){
# +    //     TRACE("XRun state, recovering\n");
 
# -        avail = stream->alsa_bufsize_frames;
# +    //     avail = stream->alsa_bufsize_frames;
 
# -        if((err = snd_pcm_recover(stream->pcm_handle, -EPIPE, 1)) < 0)
# -            WARN("snd_pcm_recover failed: %d (%s)\n", err, snd_strerror(err));
# +    //     if((err = snd_pcm_recover(stream->pcm_handle, -EPIPE, 1)) < 0)
# +    //         WARN("snd_pcm_recover failed: %d (%s)\n", err, snd_strerror(err));
 
# -        if((err = snd_pcm_reset(stream->pcm_handle)) < 0)
# -            WARN("snd_pcm_reset failed: %d (%s)\n", err, snd_strerror(err));
# +    //     if((err = snd_pcm_reset(stream->pcm_handle)) < 0)
# +    //         WARN("snd_pcm_reset failed: %d (%s)\n", err, snd_strerror(err));
 
# -        if((err = snd_pcm_prepare(stream->pcm_handle)) < 0)
# -            WARN("snd_pcm_prepare failed: %d (%s)\n", err, snd_strerror(err));
# -    }
# +    //     if((err = snd_pcm_prepare(stream->pcm_handle)) < 0)
# +    //         WARN("snd_pcm_prepare failed: %d (%s)\n", err, snd_strerror(err));
# +    // }
 
# -    TRACE("avail: %ld\n", avail);
# +    // TRACE("avail: %ld\n", avail);
 
#      /* Add a lead-in when starting with too few frames to ensure
#       * continuous rendering.  Additional benefit: Force ALSA to start. */
@@ -1484,7 +1525,7 @@ static void alsa_read_data(struct alsa_stream *stream)
 
         WARN("read failed, recovering: %ld (%s)\n", nread, snd_strerror(nread));
 
-        ret = snd_pcm_recover(stream->pcm_handle, nread, 0);
+        ret = snd_pcm_recover(stream->pcm_handle, nread, 1);
         if(ret < 0){
             WARN("Recover failed: %d (%s)\n", ret, snd_strerror(ret));
             return;
-- 
2.43.0

