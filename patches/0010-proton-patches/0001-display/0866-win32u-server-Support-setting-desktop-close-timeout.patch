From 980bc88595d6ab5a6feb512863516028a5fcb2d8 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 7 Dec 2022 12:08:43 -0600
Subject: [PATCH 0866/1306] win32u, server: Support setting desktop close
 timeout.

And use zero timeout by default.

CW-Bug-Id: #19584
CW-Bug-Id: #21645
---
 dlls/win32u/winstation.c | 27 ++++++++++++++++++++++++---
 server/protocol.def      |  3 +++
 server/user.h            |  1 +
 server/winstation.c      |  4 +++-
 4 files changed, 31 insertions(+), 4 deletions(-)

diff --git a/dlls/win32u/winstation.c b/dlls/win32u/winstation.c
index b04c0bbc910..ac625f3e212 100644
--- a/dlls/win32u/winstation.c
+++ b/dlls/win32u/winstation.c
@@ -390,6 +390,8 @@ BOOL WINAPI NtUserGetObjectInformation( HANDLE handle, INT index, void *info,
     }
 }
 
+#define TICKSPERSEC  10000000
+
 /***********************************************************************
  *           NtUserSetObjectInformation   (win32u.@)
  */
@@ -397,8 +399,19 @@ BOOL WINAPI NtUserSetObjectInformation( HANDLE handle, INT index, void *info, DW
 {
     BOOL ret;
     const USEROBJECTFLAGS *obj_flags = info;
+    LONG64 close_timeout = 0;
 
-    if (index != UOI_FLAGS || !info || len < sizeof(*obj_flags))
+    if (index == 1000)
+    {
+        /* Wine specific: set desktop close timeout. */
+        if (!info || len < sizeof(DWORD))
+        {
+            RtlSetLastWin32Error( ERROR_INVALID_PARAMETER );
+            return FALSE;
+        }
+        close_timeout = -(*(DWORD *)info * (ULONG64)TICKSPERSEC / 1000);
+    }
+    else if (index != UOI_FLAGS || !info || len < sizeof(*obj_flags))
     {
         RtlSetLastWin32Error( ERROR_INVALID_PARAMETER );
         return FALSE;
@@ -407,8 +420,16 @@ BOOL WINAPI NtUserSetObjectInformation( HANDLE handle, INT index, void *info, DW
     SERVER_START_REQ( set_user_object_info )
     {
         req->handle    = wine_server_obj_handle( handle );
-        req->flags     = SET_USER_OBJECT_SET_FLAGS;
-        req->obj_flags = obj_flags->dwFlags;
+        if (index == 1000)
+        {
+            req->flags = SET_USER_OBJECT_SET_CLOSE_TIMEOUT;
+            req->close_timeout = close_timeout;
+        }
+        else
+        {
+            req->flags     = SET_USER_OBJECT_SET_FLAGS;
+            req->obj_flags = obj_flags->dwFlags;
+        }
         ret = !wine_server_call_err( req );
     }
     SERVER_END_REQ;
diff --git a/server/protocol.def b/server/protocol.def
index 5d238ba7503..cd78c8f2f26 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -2897,6 +2897,7 @@ enum coords_relative
     obj_handle_t handle;          /* handle to the object */
     unsigned int flags;           /* information to set/get */
     unsigned int obj_flags;       /* new object flags */
+    timeout_t    close_timeout;   /* desktop close timeout */
 @REPLY
     int          is_desktop;      /* is object a desktop? */
     unsigned int old_obj_flags;   /* old object flags */
@@ -2904,6 +2905,7 @@ enum coords_relative
 @END
 #define SET_USER_OBJECT_SET_FLAGS       1
 #define SET_USER_OBJECT_GET_FULL_NAME   2
+#define SET_USER_OBJECT_SET_CLOSE_TIMEOUT 4
 
 
 /* Register a hotkey */
@@ -3671,6 +3673,7 @@ struct handle_info
 /* Make the current process a system process */
 @REQ(make_process_system)
     obj_handle_t handle;          /* handle to the process */
+    timeout_t    desktop_close_timeout; /* set timeout for desktop close */
 @REPLY
     obj_handle_t event;           /* event signaled when all user processes have exited */
 @END
diff --git a/server/user.h b/server/user.h
index c753e1799a4..26d22a00240 100644
--- a/server/user.h
+++ b/server/user.h
@@ -63,6 +63,7 @@ struct desktop
     struct hook_table   *global_hooks;     /* table of global hooks on this desktop */
     struct list          hotkeys;          /* list of registered hotkeys */
     struct timeout_user *close_timeout;    /* timeout before closing the desktop */
+    timeout_t            close_timeout_val;/* timeout duration before closing desktop */
     struct thread_input *foreground_input; /* thread input of foreground thread */
     unsigned int         users;            /* processes and threads using this desktop */
     user_handle_t                          cursor_win;       /* window that contains the cursor */
diff --git a/server/winstation.c b/server/winstation.c
index be33253d675..0cf17d00759 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -257,6 +257,7 @@ static struct desktop *create_desktop( const struct unicode_str *name, unsigned
             desktop->msg_window = NULL;
             desktop->global_hooks = NULL;
             desktop->close_timeout = NULL;
+            desktop->close_timeout_val = 0;
             desktop->foreground_input = NULL;
             desktop->users = 0;
             desktop->cursor_win = 0;
@@ -368,7 +369,7 @@ static void remove_desktop_user( struct desktop *desktop )
 
     /* if we have one remaining user, it has to be the manager of the desktop window */
     if ((process = get_top_window_owner( desktop )) && desktop->users == process->running_threads && !desktop->close_timeout)
-        desktop->close_timeout = add_timeout_user( -TICKS_PER_SEC, close_desktop_timeout, desktop );
+        desktop->close_timeout = add_timeout_user( desktop->close_timeout_val, close_desktop_timeout, desktop );
 }
 
 /* set the thread default desktop handle */
@@ -707,6 +708,7 @@ DECL_HANDLER(set_user_object_info)
         reply->is_desktop = 1;
         reply->old_obj_flags = desktop->flags;
         if (req->flags & SET_USER_OBJECT_SET_FLAGS) desktop->flags = req->obj_flags;
+        if (req->flags & SET_USER_OBJECT_SET_CLOSE_TIMEOUT) desktop->close_timeout_val = req->close_timeout;
     }
     else if (obj->ops == &winstation_ops)
     {
-- 
2.43.2

