From 5db8bd9dafc7b4aa3e00a2b6700c89c57e0c4c1f Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 20 Jun 2022 12:24:04 -0500
Subject: [PATCH 0853/1306] winex11.drv: HACK: Add WINE_SHARE_ALL_GL_CONTEXTS
 environment variable.

And auto enable it for Eador. Masters of the Broken World.

CW-Bug-Id: #20830

wglShareLists() cannot be properly implemented on top of glX context sharing.
---
 dlls/winex11.drv/opengl.c | 35 +++++++++++++++++++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/dlls/winex11.drv/opengl.c b/dlls/winex11.drv/opengl.c
index 387428d673a..7e59ec5dfa7 100644
--- a/dlls/winex11.drv/opengl.c
+++ b/dlls/winex11.drv/opengl.c
@@ -1970,6 +1970,34 @@ static BOOL glxdrv_wglCopyContext(struct wgl_context *src, struct wgl_context *d
     return TRUE;
 }
 
+static int share_all_contexts = -1;
+
+static GLXContext get_common_context( GLXFBConfig fbconfig )
+{
+    static GLXContext common_context;
+
+    if (share_all_contexts == -1)
+    {
+        const char *e = getenv( "WINE_SHARE_ALL_GL_CONTEXTS" );
+        const char *sgi = getenv( "SteamGameId" );
+
+        if (e)
+            share_all_contexts = !!atoi(e);
+        else
+            share_all_contexts = sgi && !strcmp( sgi, "232050" );
+
+        if (share_all_contexts)
+            FIXME( "HACK: sharing all the GL contexts.\n" );
+    }
+
+    if (!share_all_contexts) return NULL;
+
+    if (!common_context)
+        common_context = pglXCreateNewContext( gdi_display, fbconfig, GLX_RGBA_TYPE, NULL, TRUE );
+
+    return common_context;
+}
+
 /***********************************************************************
  *		glxdrv_wglCreateContext
  */
@@ -1988,7 +2016,7 @@ static struct wgl_context *glxdrv_wglCreateContext( HDC hdc )
     {
         ret->hdc = hdc;
         ret->fmt = gl->format;
-        ret->ctx = create_glxcontext(gdi_display, ret, NULL);
+        ret->ctx = create_glxcontext(gdi_display, ret, get_common_context( ret->fmt->fbconfig ));
         pthread_mutex_lock( &context_mutex );
         list_add_head( &context_list, &ret->entry );
         pthread_mutex_unlock( &context_mutex );
@@ -3242,6 +3270,8 @@ static BOOL glxdrv_wglShareLists(struct wgl_context *org, struct wgl_context *de
      * hasn't been made current and it hasn't shared display lists before.
      */
 
+    if (share_all_contexts == 1) return TRUE;
+
     if (!dest->has_been_current && !dest->sharing)
     {
         keep = org;
@@ -3563,7 +3593,8 @@ static struct wgl_context *X11DRV_wglCreateContextAttribsARB( HDC hdc, struct wg
         }
 
         X11DRV_expect_error(gdi_display, GLXErrorHandler, NULL);
-        ret->ctx = create_glxcontext(gdi_display, ret, hShareContext ? hShareContext->ctx : NULL);
+        ret->ctx = create_glxcontext(gdi_display, ret,
+                                     hShareContext ? hShareContext->ctx : get_common_context( ret->fmt->fbconfig ));
         XSync(gdi_display, False);
         if ((err = X11DRV_check_error()) || !ret->ctx)
         {
-- 
2.43.2

