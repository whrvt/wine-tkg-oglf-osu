From 72503e35e55ff0a2d57341bbd3fa60a076e9304c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 30 Sep 2021 15:07:25 +0200
Subject: [PATCH 0071/1306] HACK: winebus.sys: Prefer devices on UDEV hidraw
 bus over SDL bus.

---
 dlls/winebus.sys/main.c | 42 ++++++++++++++++++++++++++++++++---------
 1 file changed, 33 insertions(+), 9 deletions(-)

diff --git a/dlls/winebus.sys/main.c b/dlls/winebus.sys/main.c
index cbcb557b3d0..ab096319d21 100644
--- a/dlls/winebus.sys/main.c
+++ b/dlls/winebus.sys/main.c
@@ -71,6 +71,7 @@ struct device_extension
 {
     struct list entry;
     DEVICE_OBJECT *device;
+    const WCHAR *bus_name;
 
     CRITICAL_SECTION cs;
     enum device_state state;
@@ -283,7 +284,7 @@ static void remove_pending_irps(DEVICE_OBJECT *device)
     }
 }
 
-static DEVICE_OBJECT *bus_create_hid_device(struct device_desc *desc, UINT64 unix_device)
+static DEVICE_OBJECT *bus_create_hid_device(const WCHAR *bus_name, struct device_desc *desc, UINT64 unix_device)
 {
     struct device_extension *ext;
     DEVICE_OBJECT *device;
@@ -306,6 +307,7 @@ static DEVICE_OBJECT *bus_create_hid_device(struct device_desc *desc, UINT64 uni
 
     /* fill out device_extension struct */
     ext = (struct device_extension *)device->DeviceExtension;
+    ext->bus_name           = bus_name;
     ext->device             = device;
     ext->desc               = *desc;
     ext->index              = get_device_index(desc);
@@ -334,6 +336,17 @@ static DEVICE_OBJECT *bus_find_unix_device(UINT64 unix_device)
     return NULL;
 }
 
+static DEVICE_OBJECT *bus_find_device_from_vid_pid(const WCHAR *bus_name, struct device_desc *desc)
+{
+    struct device_extension *ext;
+
+    LIST_FOR_EACH_ENTRY(ext, &device_list, struct device_extension, entry)
+        if (!wcscmp(ext->bus_name, bus_name) && ext->desc.vid == desc->vid &&
+            ext->desc.pid == desc->pid) return ext->device;
+
+    return NULL;
+}
+
 static void bus_unlink_hid_device(DEVICE_OBJECT *device)
 {
     struct device_extension *ext = (struct device_extension *)device->DeviceExtension;
@@ -520,7 +533,7 @@ static void mouse_device_create(void)
     struct device_create_params params = {{0}};
 
     if (winebus_call(mouse_create, &params)) return;
-    mouse_obj = bus_create_hid_device(&params.desc, params.device);
+    mouse_obj = bus_create_hid_device(L"WINEBUS", &params.desc, params.device);
     IoInvalidateDeviceRelations(bus_pdo, BusRelations);
 }
 
@@ -529,7 +542,7 @@ static void keyboard_device_create(void)
     struct device_create_params params = {{0}};
 
     if (winebus_call(keyboard_create, &params)) return;
-    keyboard_obj = bus_create_hid_device(&params.desc, params.device);
+    keyboard_obj = bus_create_hid_device(L"WINEBUS", &params.desc, params.device);
     IoInvalidateDeviceRelations(bus_pdo, BusRelations);
 }
 
@@ -577,7 +590,20 @@ static DWORD CALLBACK bus_main_thread(void *args)
             IoInvalidateDeviceRelations(bus_pdo, BusRelations);
             break;
         case BUS_EVENT_TYPE_DEVICE_CREATED:
-            device = bus_create_hid_device(&event->device_created.desc, event->device);
+            RtlEnterCriticalSection(&device_list_cs);
+            if (!wcscmp(bus.name, L"SDL"))
+            {
+                if (bus_find_device_from_vid_pid(L"UDEV", &event->device_created.desc)) device = NULL;
+                else device = bus_create_hid_device(bus.name, &event->device_created.desc, event->device);
+            }
+            else if (!wcscmp(bus.name, L"UDEV"))
+            {
+                if ((device = bus_find_device_from_vid_pid(L"SDL", &event->device_created.desc)))
+                    bus_unlink_hid_device(device);
+                device = bus_create_hid_device(bus.name, &event->device_created.desc, event->device);
+            }
+            else device = bus_create_hid_device(bus.name, &event->device_created.desc, event->device);
+            RtlLeaveCriticalSection(&device_list_cs);
             if (device) IoInvalidateDeviceRelations(bus_pdo, BusRelations);
             else
             {
@@ -785,11 +811,9 @@ static NTSTATUS fdo_pnp_dispatch(DEVICE_OBJECT *device, IRP *irp)
         mouse_device_create();
         keyboard_device_create();
 
-        if (!check_bus_option(L"Enable SDL", 1) || sdl_driver_init())
-        {
-            udev_driver_init();
-            iohid_driver_init();
-        }
+        udev_driver_init();
+        iohid_driver_init();
+        sdl_driver_init();
 
         irp->IoStatus.Status = STATUS_SUCCESS;
         break;
-- 
2.43.2

