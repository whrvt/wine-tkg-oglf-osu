From 9960a4edf526bf5e97470ce35b7b8f91093a1edd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sun, 14 Nov 2021 14:40:55 +0100
Subject: [PATCH 0292/1306] winex11.drv: Support XInput2 events for individual
 windows.

This will allow us to listen to the XInput version of several events,
which can bring additional information.
---
 dlls/winex11.drv/desktop.c |   1 +
 dlls/winex11.drv/event.c   |  16 ++++++
 dlls/winex11.drv/mouse.c   | 107 +++++++++++++++++++++++++++----------
 dlls/winex11.drv/window.c  |   3 ++
 dlls/winex11.drv/x11drv.h  |   1 +
 5 files changed, 99 insertions(+), 29 deletions(-)

diff --git a/dlls/winex11.drv/desktop.c b/dlls/winex11.drv/desktop.c
index 52541bc5422..ba55b71deb4 100644
--- a/dlls/winex11.drv/desktop.c
+++ b/dlls/winex11.drv/desktop.c
@@ -86,6 +86,7 @@ BOOL X11DRV_CreateDesktop( const WCHAR *name, UINT width, UINT height )
                          0, 0, width, height, 0, default_visual.depth, InputOutput,
                          default_visual.visual, CWEventMask | CWCursor | CWColormap, &win_attr );
     if (!win) return FALSE;
+    X11DRV_XInput2_Enable( display, win, win_attr.event_mask );
     XFlush( display );
 
     X11DRV_init_desktop( win, width, height );
diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 9f4ec8fb364..09369abee11 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -235,6 +235,22 @@ static Bool filter_event( Display *display, XEvent *event, char *arg )
         return (mask & QS_MOUSEBUTTON) != 0;
 #ifdef GenericEvent
     case GenericEvent:
+#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
+        if (event->xcookie.extension == xinput2_opcode)
+        {
+            switch (event->xcookie.evtype)
+            {
+            case XI_RawButtonPress:
+            case XI_RawButtonRelease:
+                return (mask & QS_MOUSEBUTTON) != 0;
+            case XI_RawMotion:
+                return (mask & QS_INPUT) != 0;
+            case XI_DeviceChanged:
+                return (mask & (QS_INPUT|QS_MOUSEBUTTON)) != 0;
+            }
+        }
+#endif
+        return (mask & QS_SENDMESSAGE) != 0;
 #endif
     case MotionNotify:
     case EnterNotify:
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 0884ee3dc26..22ec9cb8d81 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -345,25 +345,42 @@ void X11DRV_XInput2_Init(void)
 
 
 /***********************************************************************
- *              enable_xinput2
+ *              X11DRV_XInput2_Enable
  */
-static void enable_xinput2(void)
+void X11DRV_XInput2_Enable( Display *display, Window window, long event_mask )
 {
     struct x11drv_thread_data *data = x11drv_thread_data();
-    XIEventMask mask;
-    XIDeviceInfo *pointer_info;
     unsigned char mask_bits[XIMaskLen(XI_LASTEVENT)];
+    BOOL raw = (window == None);
+    XIDeviceInfo *pointer_info;
+    XIEventMask mask;
     int count;
 
     mask.mask     = mask_bits;
     mask.mask_len = sizeof(mask_bits);
     mask.deviceid = XIAllMasterDevices;
     memset( mask_bits, 0, sizeof(mask_bits) );
-    XISetMask( mask_bits, XI_DeviceChanged );
-    XISetMask( mask_bits, XI_RawMotion );
-    XISetMask( mask_bits, XI_ButtonPress );
 
-    pXISelectEvents( data->display, DefaultRootWindow( data->display ), &mask, 1 );
+    /* FIXME: steam overlay doesn't like if we use XI2 for non-raw events */
+
+    if (event_mask & PointerMotionMask)
+    {
+        XISetMask( mask_bits, XI_DeviceChanged );
+        if (raw) XISetMask( mask_bits, XI_RawMotion );
+    }
+    if (event_mask & ButtonPressMask)
+    {
+        XISetMask( mask_bits, XI_DeviceChanged );
+        if (raw) XISetMask( mask_bits, XI_RawButtonPress );
+    }
+    if (event_mask & ButtonReleaseMask)
+    {
+        XISetMask( mask_bits, XI_DeviceChanged );
+        if (raw) XISetMask( mask_bits, XI_RawButtonRelease );
+    }
+
+    pXISelectEvents( display, raw ? DefaultRootWindow( display ) : window, &mask, 1 );
+    if (!raw) XSelectInput( display, window, event_mask );
 
     pointer_info = pXIQueryDevice( data->display, data->xi2_core_pointer, &count );
     update_relative_valuators( pointer_info->classes, pointer_info->num_classes );
@@ -372,24 +389,6 @@ static void enable_xinput2(void)
 
 #endif
 
-/***********************************************************************
- *              disable_xinput2
- */
-static void disable_xinput2(void)
-{
-#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
-    struct x11drv_thread_data *data = x11drv_thread_data();
-    XIEventMask mask;
-
-    mask.mask = NULL;
-    mask.mask_len = 0;
-    mask.deviceid = XIAllMasterDevices;
-
-    pXISelectEvents( data->display, DefaultRootWindow( data->display ), &mask, 1 );
-#endif
-}
-
-
 /***********************************************************************
  *		grab_clipping_window
  *
@@ -419,7 +418,7 @@ static BOOL grab_clipping_window( const RECT *clip )
     }
 
     /* enable XInput2 unless we are already clipping */
-    if (!data->clipping_cursor) enable_xinput2();
+    if (!data->clipping_cursor) X11DRV_XInput2_Enable( data->display, None, PointerMotionMask );
 
     TRACE( "clipping to %s win %lx\n", wine_dbgstr_rect(clip), clip_window );
 
@@ -464,7 +463,7 @@ static BOOL grab_clipping_window( const RECT *clip )
 
     if (!clipping_cursor)
     {
-        disable_xinput2();
+        X11DRV_XInput2_Enable( data->display, None, 0 );
         return FALSE;
     }
     clip_rect = *clip;
@@ -493,7 +492,7 @@ void ungrab_clipping_window(void)
     if (clipping_cursor) XUngrabPointer( data->display, CurrentTime );
     clipping_cursor = FALSE;
     data->clipping_cursor = FALSE;
-    disable_xinput2();
+    X11DRV_XInput2_Enable( data->display, None, 0 );
 }
 
 /***********************************************************************
@@ -1821,6 +1820,52 @@ static BOOL X11DRV_RawMotion( XGenericEventCookie *xev )
     return TRUE;
 }
 
+static BOOL X11DRV_XIDeviceEvent( XIDeviceEvent *event )
+{
+    DWORD button = event->detail - 1;
+    INPUT input;
+    HWND hwnd;
+
+    if (XFindContext( event->display, event->event, winContext, (char **)&hwnd ) != 0)
+        hwnd = 0;  /* not for a registered window */
+    if (!hwnd && event->event == root_window) hwnd = NtUserGetDesktopWindow();
+
+    TRACE( "evtype %u hwnd %p/%lx pos %f,%f detail %u flags %#x serial %lu\n",
+           event->evtype, hwnd, event->event, event->event_x, event->event_y, event->detail, event->flags, event->serial );
+
+    if (!hwnd && is_old_motion_event( event->serial ))
+    {
+        TRACE( "pos %f,%f old serial %lu, ignoring\n", event->event_x, event->event_y, event->serial );
+        return FALSE;
+    }
+
+    input.mi.dx          = event->event_x;
+    input.mi.dy          = event->event_y;
+    input.mi.mouseData   = 0;
+    input.mi.dwFlags     = MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE;
+    input.mi.time        = x11drv_time_to_ticks( event->time );
+    input.mi.dwExtraInfo = 0;
+
+    switch (event->evtype)
+    {
+    case XI_ButtonPress:
+        if (button >= NB_BUTTONS) return FALSE;
+        update_user_time( event->time );
+        input.mi.mouseData = button_down_data[button];
+        input.mi.dwFlags |= button_down_flags[button];
+        break;
+    case XI_ButtonRelease:
+        if (button >= NB_BUTTONS) return FALSE;
+        input.mi.mouseData = button_up_data[button];
+        input.mi.dwFlags |= button_up_flags[button];
+        break;
+    }
+
+    map_event_coords( hwnd, event->event, event->root, event->root_x, event->root_y, &input );
+    send_mouse_input( hwnd, event->event, event->detail, &input );
+    return TRUE;
+}
+
 #endif /* HAVE_X11_EXTENSIONS_XINPUT2_H */
 
 /***********************************************************************
@@ -1892,6 +1937,10 @@ BOOL X11DRV_GenericEvent( HWND hwnd, XEvent *xev )
     case XI_RawMotion:
         ret = X11DRV_RawMotion( event );
         break;
+    case XI_Motion:
+    case XI_ButtonPress:
+    case XI_ButtonRelease:
+        return X11DRV_XIDeviceEvent( event->data );
 
     default:
         TRACE( "Unhandled event %#x\n", event->evtype );
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index c952a40f623..5b6627ab63f 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -469,6 +469,7 @@ static void sync_window_style( struct x11drv_win_data *data )
         int mask = get_window_attributes( data, &attr );
 
         XChangeWindowAttributes( data->display, data->whole_window, mask, &attr );
+        X11DRV_XInput2_Enable( data->display, data->whole_window, attr.event_mask );
     }
 }
 
@@ -2121,6 +2122,7 @@ static void create_whole_window( struct x11drv_win_data *data )
                                         data->vis.visual, mask, &attr );
     if (!data->whole_window) goto done;
 
+    X11DRV_XInput2_Enable( data->display, data->whole_window, attr.event_mask );
     set_initial_wm_hints( data->display, data->whole_window );
     set_wm_hints( data );
 
@@ -2476,6 +2478,7 @@ BOOL X11DRV_CreateWindow( HWND hwnd )
         data->clip_window = XCreateWindow( data->display, root_window, 0, 0, 1, 1, 0, 0,
                                            InputOnly, default_visual.visual,
                                            CWOverrideRedirect | CWEventMask, &attr );
+        X11DRV_XInput2_Enable( data->display, data->clip_window, attr.event_mask );
         XFlush( data->display );
         NtUserSetProp( hwnd, clip_window_prop, (HANDLE)data->clip_window );
         X11DRV_DisplayDevices_RegisterEventHandlers();
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 7a2f559fc52..65e947d195f 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -269,6 +269,7 @@ extern void X11DRV_ThreadDetach(void);
 extern void X11DRV_Xcursor_Init(void);
 extern void X11DRV_XInput2_Load(void);
 extern void X11DRV_XInput2_Init(void);
+extern void X11DRV_XInput2_Enable( Display *display, Window window, long event_mask );
 
 extern DWORD copy_image_bits( BITMAPINFO *info, BOOL is_r8g8b8, XImage *image,
                               const struct gdi_image_bits *src_bits, struct gdi_image_bits *dst_bits,
-- 
2.43.2

